import numpy as np
import math
class Position:
    def __init__(self, x, y, is_traversable):
        self.x=x
        self.y=y
        self.is_traversable = (is_traversable==0)
        
class Map:
    def __init__(self, w, h, v):
        self.w=w
        self.h=h
        self.grid = [[Position(x,y,v[x][y]) for x in range(w)] for y in range(h)]
    # def gen(self,w,h,v):



# class Rover:
#     def __init__(self, x):
#         self.x=x

grid_data = np.random.choice([0, 1], size=(10, 10), p=[0.8, 0.2]).tolist()
print(f"Grid shape: {len(grid_data)} rows x {len(grid_data[0])} cols")
for y in range(len(grid_data)):
    for x in range(len(grid_data[y])):
        print(f"grid_data[{y}][{x}] = {grid_data[y][x]}")

my_map = Map(10, 10, grid_data)

# Example: check if (2, 3) is traversable
print(my_map.grid[3][2].is_traversable)